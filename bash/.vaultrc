#!/usr/bin/env bash

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Aliases

# memory is a cold mistress
alias valias="grep 'alias\s\w*\|v\w*(' $HOME/code/dotfiles/bash/.vaultrc"

alias vaudit="vault audit enable file file_path=/tmp/vault_audit.log"
alias vdebug='GCFLAGS="all=-N -l" make dev'
alias vdlv="dlv --listen=:2345 --headless=true --api-version=2 exec $HOME/go/bin/vault -- server -dev -log-level=debug -dev-root-token-id=root -dev-plugin-dir=$HOME/dev/plugins"
alias vedit="vim $HOME/code/dotfiles/bash/.vaultrc"
alias vservecluster="vault server -dev -dev-root-token-id=root -log-level=debug -dev-three-node"

# terraform debugging
alias tfdlv="dlv exec --listen=:2345 --accept-multiclient --continue --headless ~/.terraform.d/plugins/terraform-provider-vault -- -debug"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Functions

# run dev build of vault in dev mode
# optionally pass in "&" to run in the background
vdev() {
  $HOME/go/bin/vault server \
    -dev \
    -log-level="debug" \
    -dev-ha \
    -dev-transactional \
    -dev-root-token-id=root \
    -dev-plugin-dir=$HOME/dev/plugins \
    "$@"
}

# run vault in dev mode
# optionally pass in "&" to run in the background
vserve() {
  vault server \
    -dev \
    -dev-root-token-id=root \
    -log-level=debug \
    -config="$HOME/dev/config/vault.hcl" \
    "$@"
}

vwait() {
  if [ -z $VAULT_ADDR ]; then
    echo "VAULT_ADDR not set!"
    return 1
  fi

  while ! vault status >/dev/null 2>&1; do
    sleep 1
  done
}

vcurl() {
  if [[ "$@" == "" ]]; then
    echo "usage: vcurl PATH"
    echo
    echo "example:"
    echo -e "\tvcurl secret/data/my-secret"
    echo
    return 0
  fi

  local path="$1"
  local method="$2"

  [[ ${path:?} ]]

  # currently not supported
  if [ -z "$method" ]; then
    method="--request GET"
  fi

  curl -s \
    --header "X-Vault-Token: root" ${method} \
    "http://127.0.0.1:8200/v1/$path" | jq
}

tft() {
  make testacc-ent TESTARGS="-v -run ${@} ./vault/..."
}

vdlvagent() {
  dlv --listen=:2345 --headless=true --api-version=2 \
    exec $HOME/go/bin/vault -- \
    agent -log-level=trace "$@"
}

vset() {
  export VAULT_DEV_ROOT_TOKEN_ID="root"
  export VAULT_TOKEN="root"
  export VAULT_ADDR="http://127.0.0.1:8200"
  export VAULT_LICENSE_PATH="$HOME/dev/license/vault.hclic"
  export VAULT_LICENSE="$(cat $HOME/dev/license/vault.hclic)"
}

# vset but with extra goodies
vsetx() {
  vset
  export VAULT_CLIENT_TIMEOUT=1000
}

vunset() {
  unset VAULT_DEV_ROOT_TOKEN_ID
  unset VAULT_TOKEN
  unset VAULT_ADDR
  unset VAULT_CACERT
  unset VAULT_LICENSE
  unset VAULT_LICENSE_PATH
  unset VAULT_NAMESPACE
}

# print vault env vars and processes
vv() {
  vault --version
  echo
  echo "VAULT_ADDR=$VAULT_ADDR"
  echo "VAULT_CACERT=$VAULT_CACERT"
  echo "VAULT_CLIENT_TIMEOUT=$VAULT_CLIENT_TIMEOUT"
  echo "VAULT_DEV_ROOT_TOKEN_ID=$VAULT_DEV_ROOT_TOKEN_ID"
  echo "VAULT_LICENSE=$VAULT_LICENSE"
  echo "VAULT_LICENSE_PATH=$VAULT_LICENSE_PATH"
  echo "VAULT_NAMESPACE=$VAULT_NAMESPACE"
  echo "VAULT_TOKEN=$VAULT_TOKEN"

  local output=$(ps aux | awk 'NR==1 || /vault server/' | grep -v awk)
  readarray -t lines <<<"$output"
  if [[ -n ${lines[1]} ]]; then
    echo
    echo "$output"
  fi
}

# build a binary for vault enterprise
vent() {
  GOOS=linux GOARCH=amd64 make entbin
}

# build a docker image for vault enterprise
ventdock() {
  local version="$1"
  local tag="$2"

  [[ ${version:?} ]]

  if [ -z $tag ]; then
    tag="vault-ent:dev"
  fi

  eval $(ssh-agent)
  ssh-add ~/.ssh/id_ed25519
  GOOS=linux GOARCH=amd64 make entbin
  mkdir -p ./dist/linux/amd64
  cp ./bin/vault ./dist/linux/amd64
  docker build \
    --build-arg VERSION=${version}-dev \
    --build-arg BIN_NAME=vault \
    --build-arg TARGETOS=linux \
    --build-arg TARGETARCH=amd64 \
    -t ${tag} .
}

# vault backport
#   usage: vbp 1.9 12345 dfhafefdfda
vbp() {
  if [[ "$@" == "" ]]; then
    echo "usage: vbp VERSION PR_NUM SHA"
    echo
    echo "example:"
    echo -e "\tvbp 1.9 12345 dfhafefdfda"
    echo
    return 0
  fi

  local version="$1"
  local issue="$2"
  local sha="$3"

  [[ ${version:?} ]]
  [[ ${issue:?} ]]
  [[ ${sha:?} ]]

  local bp_branch=backport-pr-${issue}-${version}.x
  local rel_branch=release/${version}.x

  git checkout ${rel_branch}
  git pull
  git checkout -b ${bp_branch}
  git cherry-pick ${sha}

  echo
  echo "Backports https://github.com/hashicorp/vault/pull/${issue} into ${rel_branch}"
  echo
  echo "Steps:"
  echo '```'
  echo "git checkout ${rel_branch}"
  echo "git checkout -b ${bp_branch}"
  echo "git cherry-pick ${sha}"
  echo '```'
  echo
}

# tfdev
#   usage:
#     # enable vault provider override
#     tfdev
#
#     # disable vault provider override
#     tfdev 0
tfdev() {
  if [[ "$@" == "" ]]; then
    # enable vault provider override
    # sed will uncomment line if not already uncommented
    sed -i '' '/vault/s/^#//g' ${HOME}/.terraformrc
    return 0
  fi

  # disable vault provider overrride
  # sed will comment the line if not already commented
  sed -i '' -e '/vault/ s/^#*/#/' ${HOME}/.terraformrc
}
