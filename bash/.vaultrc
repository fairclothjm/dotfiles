#!/usr/bin/env bash

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Aliases

# memory is a cold mistress
alias valias="grep 'alias\|v\w*(' /Users/$USER/code/dotfiles/bash/.vaultrc"

alias vaudit="vault audit enable file file_path=/tmp/vault_audit.log"
alias vdebug='GCFLAGS="all=-N -l" make dev'
alias vdlv="dlv --listen=:2345 --headless=true --api-version=2 exec ./pkg/darwin_amd64/vault -- server -dev -log-level=debug -dev-root-token-id=root"
alias vedit="vim /Users/$USER/code/dotfiles/bash/.vaultrc"
alias vservecluster="vault server -dev -dev-root-token-id=root -log-level=debug -dev-three-node"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Functions

# run dev build of vault in dev mode
# optionally pass in "&" to run in the background
vdev() {
  ./pkg/darwin_amd64/vault server \
    -dev \
    -log-level="debug" \
    -dev-ha \
    -dev-transactional \
    -dev-root-token-id=root \
    -dev-plugin-dir=/Users/$USER/dev/plugins \
    "$@"
}

# run vault in dev mode
# optionally pass in "&" to run in the background
vserve() {
  vault server \
    -dev \
    -dev-root-token-id=root \
    -log-level=trace \
    -dev-plugin-dir=/Users/$USER/dev/plugins \
    "$@"
}

vset() {
  export VAULT_DEV_ROOT_TOKEN_ID="root"
  export VAULT_TOKEN="root"
  export VAULT_ADDR="http://127.0.0.1:8200"
  export VAULT_LICENSE_PATH="/Users/$USER/dev/license/vault.hclic"
  export VAULT_LICENSE="$(cat /Users/$USER/dev/license/vault.hclic)"
}

vunset() {
  unset VAULT_DEV_ROOT_TOKEN_ID
  unset VAULT_TOKEN
  unset VAULT_ADDR
  unset VAULT_CACERT
  unset VAULT_LICENSE
  unset VAULT_LICENSE_PATH
  unset VAULT_NAMESPACE
}

# print vault env vars and processes
vv() {
  echo "VAULT_DEV_ROOT_TOKEN_ID=$VAULT_DEV_ROOT_TOKEN_ID"
  echo "VAULT_TOKEN=$VAULT_TOKEN"
  echo "VAULT_ADDR=$VAULT_ADDR"
  echo "VAULT_CACERT=$VAULT_CACERT"
  echo "VAULT_LICENSE=$VAULT_LICENSE"
  echo "VAULT_LICENSE_PATH=$VAULT_LICENSE_PATH"
  echo "VAULT_NAMESPACE=$VAULT_NAMESPACE"

  local output=$(ps aux | awk 'NR==1 || /vault server/' | grep -v awk)
  readarray -t lines <<<"$output"
  if [[ -n ${lines[1]} ]]; then
    echo
    echo "$output"
  fi
}

# vault backport
#   usage: vbp 1.9 12345 dfhafefdfda
vbp() {
  if [[ "$@" == "" ]]; then
    echo "usage: vbp VERSION PR_NUM SHA"
    echo
    echo "example:"
    echo -e "\tvbp 1.9 12345 dfhafefdfda"
    echo
    return 0
  fi

  local version="$1"
  local issue="$2"
  local sha="$3"

  [[ ${version:?} ]]
  [[ ${issue:?} ]]
  [[ ${sha:?} ]]

  local bp_branch=backport-pr-${issue}-${version}.x
  local rel_branch=release/${version}.x

  git checkout ${rel_branch}
  git pull
  git checkout -b ${bp_branch}
  git cherry-pick ${sha}

  echo
  echo "Backports https://github.com/hashicorp/vault/pull/${issue} into ${rel_branch}"
  echo
  echo "Steps:"
  echo '```'
  echo "git checkout ${rel_branch}"
  echo "git checkout -b ${bp_branch}"
  echo "git cherry-pick ${sha}"
  echo '```'
  echo
}
